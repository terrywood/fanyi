<?xml version="1.0" encoding="UTF-8"?>
<project name="HKLand iOS Application" basedir="." default="">

	<description>HKLand iOS Application</description>
    <property name="src" value="src" />
    <property name="classes" value="out/classes" />

    <!--构造打包时Class-Path需要的路径 -->
    <!--pathconvert用于对目录进行组合 property即这个组合的名字，pathsep作用是各个文件之间的分隔符，
        如果不写，在windows平台默认是分号。但时在MANIFEST.MF这个文件中，各个jar包之间要用空格区分，
        因此。这里就写成空格了
    -->
    <pathconvert property="lib" pathsep=" ">
        <!--mapper,对路径组合方式进行控制-->
        <mapper>
            <!--chainedmapper 作用是联合多个mapper-->
            <chainedmapper>
                <!--过滤文件，将路径去掉，只保留文件名-->
                <flattenmapper />
                <!--过滤+转换器，将所有的文件名前面都加上一个lib，我们知道lib目录下面有jar包，
                    lib/*的作用其实是将jar包名与路径进行组合形成如：lib/google.jar这样的相对路径
                 -->
                <globmapper from="*" to="lib/*" />
            </chainedmapper>
        </mapper>
        <!--按照mapper定义的格式组合lib目录下面的所有jar文件，形成诸如lib/jar1.jar lib/jar2.jar的字符串-->
        <fileset dir="lib">
            <include name="*.jar" />
        </fileset>
    </pathconvert>

    <!--创建任务init，负责初始化一些条件-->
    <target name="init">
        <!-- 创建存放编译后的class的目录
            mkdir可以创建多级目录
        -->
        <mkdir dir="${classes}" />
    </target>

    <!--创建编译任务，名字是compile,depends指定了comiple任务依赖init任务-->
    <target name="compile" depends="init" description="comile target">
        <!--javac，编译，对应java中的javac命令。
        其中srcdir定义源文件路径 destdir定义编译后文件路径，
        includeantruntime作用是指定编译任务是否包含ant的classpath,可有可无，不影响编译，
        但不写可能会出现警告，为了眼不见心不烦，加上吧-->
        <javac srcdir="${src}" destdir="${classes}" includeantruntime="true">
            <!-- classpath 定义编译需要的claspath -->
            <classpath>
                <fileset dir="lib">
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </javac>
    </target>



    <target name="jar"  depends="compile" description="make jar file">
		<jar destfile="dist/fanyi.jar" basedir="${classes}">
            <!--为jar包指定manifest，当然，如果jar包不需要打成runnable的形式，manifest可以不要-->
            <manifest>
                <!--指定main-class-->
                <attribute name="Main-Class" value="xibox.utils.JFileChooserDemo" />
                <!--指定Class-Path-->
                <attribute name="Class-Path" value="${lib}">
                </attribute>
            </manifest>
        </jar>
	</target>


</project>